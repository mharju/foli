<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1479027533133">{:repl-history {:ide [], :local [&quot;(component/start (create-system))&quot; &quot;(take (distinct [1 1 2 3 4]))&quot; &quot;(doseq (distinct [1 1 2 3 4]))&quot; &quot;(doall (distinct [1 1 2 3 4]))&quot; &quot;(doall (distinct [1  2 3 1 2 4]))&quot; &quot;(map inc (range 10))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/with-db-transaction [conn &amp; args]\n      (j/delete! conn :routes_stops [])\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop)))))&quot; &quot;()&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/with-db-transaction [conn db-spec options]\n      (j/delete! conn :routes_stops [])\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop)))))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/with-db-transaction [conn db-spec]\n      (j/delete! conn :routes_stops [])\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop)))))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/with-db-transaction [conn]\n      (j/delete! conn :routes_stops [])\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop)))))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/with-db-transaction [db]\n      (j/delete! conn :routes_stops [])\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop)))))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/with-db-transaction [db conn]\n      (j/delete! conn :routes_stops [])\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop)))))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/with-db-transaction [conn db]\n      (j/delete! conn :routes_stops [])\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop)))))&quot; &quot;(dev/reset)&quot; &quot;(require 'dev)&quot; &quot;(dev)&quot; &quot;(stop)&quot; &quot;(start)&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/with-db-transaction [conn db]\n      (j/delete! conn :routes_stops)\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop)))))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/with-db-transaction [conn db]\n      (j/delete! conn :routes_stops nil)\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop)))))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/with-db-transaction [conn db]\n      #_(j/delete! conn :routes_stops nil)\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop)))))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n      (j/delete! conn :routes_stops nil)\n      (for [route-and-stop routes-and-stops] (j/insert! conn :routes_stops route-and-stop))))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/delete! conn :routes_stops nil)\n    (for [route-and-stop routes-and-stops]\n      (j/insert! conn :routes_stops route-and-stop))))&quot; &quot;(defn build-stop-route-index []\n  (let [routes-and-stops (j/query db [\&quot;select distinct s.stop_id, r.route_short_name\n                           from stops s\n                           left join stop_times st on st.stop_id = s.stop_id\n                           left join trips t on t.trip_id = st.trip_id\n                           left join routes r on r.route_id = t.route_id\&quot;])]\n    (j/delete! db :routes_stops nil)\n    (for [route-and-stop routes-and-stops]\n      (j/insert! db :routes_stops route-and-stop))))&quot; &quot;(buil)&quot; &quot;(build-stop-route-index)&quot; &quot;(j/query db [\&quot;select count(*) from routes_stops\&quot;])&quot; &quot;(system/find-routes-by-stop-ids [59])&quot; &quot;(require 'figwheel-sidecar.repl-api)&quot; &quot;*ns*&quot; &quot;(cljs-repl)&quot; &quot;(fw/cljs-repl)&quot; &quot;@re-frame.db/app-db&quot; &quot;:cljs/quit&quot; &quot;(ns-imports 'user)&quot; &quot;system&quot; &quot;(in-ns 'foli.system)&quot; &quot;(use 'figwheel-sidecar.repl-api)&quot; &quot;(start-figwheel!)&quot; &quot;(defn find-routes-by-stop-ids [stop-ids]\n  (let [result (j/query\n                 db\n                 (concat\n                   [(str \&quot;select r.stop_id, r.route_short_name, s.stop_lat, s.stop_lon\n                           from routes_stops r\n                           left join stops s on r.stop_id = s.stop_id\n                           where r.stop_id IN (\&quot;\n                         (clojure.string/join \&quot;,\&quot;\n                                              (map (fn [_] \&quot;?\&quot;)\n                                                   (range (count stop-ids))))\n                         \&quot;)\&quot;)] stop-ids))]\n    (-&gt;&gt; result\n         (group-by :stop_id)\n         (map (fn [[k v]] [k (map #(select-keys % [:route_short_name :stop_lat :stop_lon]) v)]))\n         (into {}))))&quot; &quot;(user/reset)&quot; &quot;(defn find-routes-by-stop-ids [stop-ids]\n  (let [result (j/query\n                 db\n                 (concat\n                   [(str \&quot;selct r.stop_id, r.route_short_name, s.stop_lat, s.stop_lon\n                           from routes_stops r\n                           left join stops s on r.stop_id = s.stop_id\n                           where r.stop_id IN (\&quot;\n                         (clojure.string/join \&quot;,\&quot;\n                                              (map (fn [_] \&quot;?\&quot;)\n                                                   (range (count stop-ids))))\n                         \&quot;)\&quot;)] stop-ids))]\n    (-&gt;&gt; result\n         (group-by :stop_id)\n         (map (fn [[k v]] [k (map #(select-keys % [:route_short_name :stop_lat :stop_lon]) v)]))\n         (into {}))))&quot; &quot;(+ 1 1)&quot; &quot;(ns user\n  (:require [reloaded.repl :refer [system reset stop]]\n            [foli.system :as system]\n            [figwheel-sidecar.repl-api :as fw]))&quot; &quot;(reloaded.repl/set-init! #'system/create-system)&quot; &quot;(fw/start-figwheel!)&quot; &quot;(in-ns 'user)&quot; &quot;(reset)&quot;], :remote []}}</component>
</project>